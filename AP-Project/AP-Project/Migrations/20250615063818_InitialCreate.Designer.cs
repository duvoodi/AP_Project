// <auto-generated />
using System;
using AP_Project.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AP_Project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250615063818_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AP_Project.Models.Classrooms.Classroom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("AP_Project.Models.Classrooms.TimeSlot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("TimeSlots");

                    b.HasData(
                        new
                        {
                            Id = "101",
                            Day = "Saturday",
                            EndTime = new TimeSpan(0, 10, 30, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = "102",
                            Day = "Saturday",
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 10, 30, 0, 0)
                        },
                        new
                        {
                            Id = "103",
                            Day = "Saturday",
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            StartTime = new TimeSpan(0, 14, 30, 0, 0)
                        },
                        new
                        {
                            Id = "104",
                            Day = "Saturday",
                            EndTime = new TimeSpan(0, 17, 30, 0, 0),
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = "201",
                            Day = "Sunday",
                            EndTime = new TimeSpan(0, 10, 30, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = "202",
                            Day = "Sunday",
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 10, 30, 0, 0)
                        },
                        new
                        {
                            Id = "203",
                            Day = "Sunday",
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            StartTime = new TimeSpan(0, 14, 30, 0, 0)
                        },
                        new
                        {
                            Id = "204",
                            Day = "Sunday",
                            EndTime = new TimeSpan(0, 17, 30, 0, 0),
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = "301",
                            Day = "Monday",
                            EndTime = new TimeSpan(0, 10, 30, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = "302",
                            Day = "Monday",
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 10, 30, 0, 0)
                        },
                        new
                        {
                            Id = "303",
                            Day = "Monday",
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            StartTime = new TimeSpan(0, 14, 30, 0, 0)
                        },
                        new
                        {
                            Id = "304",
                            Day = "Monday",
                            EndTime = new TimeSpan(0, 17, 30, 0, 0),
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = "401",
                            Day = "Tuesday",
                            EndTime = new TimeSpan(0, 10, 30, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = "402",
                            Day = "Tuesday",
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 10, 30, 0, 0)
                        },
                        new
                        {
                            Id = "403",
                            Day = "Tuesday",
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            StartTime = new TimeSpan(0, 14, 30, 0, 0)
                        },
                        new
                        {
                            Id = "404",
                            Day = "Tuesday",
                            EndTime = new TimeSpan(0, 17, 30, 0, 0),
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = "501",
                            Day = "Wednesday",
                            EndTime = new TimeSpan(0, 10, 30, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = "502",
                            Day = "Wednesday",
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 10, 30, 0, 0)
                        },
                        new
                        {
                            Id = "503",
                            Day = "Wednesday",
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            StartTime = new TimeSpan(0, 14, 30, 0, 0)
                        },
                        new
                        {
                            Id = "504",
                            Day = "Wednesday",
                            EndTime = new TimeSpan(0, 17, 30, 0, 0),
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("AP_Project.Models.Courses.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinalExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("AP_Project.Models.Courses.Prerequisite", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrerequisiteCourseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseId", "PrerequisiteCourseId");

                    b.HasIndex("PrerequisiteCourseId");

                    b.ToTable("Prerequisites");
                });

            modelBuilder.Entity("AP_Project.Models.Courses.Section", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassroomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeSlotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("AP_Project.Models.Courses.Takes", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "SectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("Takes");
                });

            modelBuilder.Entity("AP_Project.Models.Courses.Teaches", b =>
                {
                    b.Property<string>("InstructorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SectionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InstructorId", "SectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("Teaches");
                });

            modelBuilder.Entity("AP_Project.Models.Users.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AP_Project.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AP_Project.Models.Users.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AP_Project.Models.Users.Admin", b =>
                {
                    b.HasBaseType("AP_Project.Models.Users.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("AP_Project.Models.Users.Instructor", b =>
                {
                    b.HasBaseType("AP_Project.Models.Users.User");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Instructor");
                });

            modelBuilder.Entity("AP_Project.Models.Users.Student", b =>
                {
                    b.HasBaseType("AP_Project.Models.Users.User");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("AP_Project.Models.Courses.Prerequisite", b =>
                {
                    b.HasOne("AP_Project.Models.Courses.Course", "Course")
                        .WithMany("Prerequisites")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AP_Project.Models.Courses.Course", "PrerequisiteCourse")
                        .WithMany()
                        .HasForeignKey("PrerequisiteCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("PrerequisiteCourse");
                });

            modelBuilder.Entity("AP_Project.Models.Courses.Section", b =>
                {
                    b.HasOne("AP_Project.Models.Classrooms.Classroom", "Classroom")
                        .WithMany("Sections")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AP_Project.Models.Courses.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AP_Project.Models.Classrooms.TimeSlot", "TimeSlot")
                        .WithMany("Sections")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Course");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("AP_Project.Models.Courses.Takes", b =>
                {
                    b.HasOne("AP_Project.Models.Courses.Section", "Section")
                        .WithMany("Takes")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AP_Project.Models.Users.Student", "Student")
                        .WithMany("Takes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AP_Project.Models.Courses.Teaches", b =>
                {
                    b.HasOne("AP_Project.Models.Users.Instructor", "Instructor")
                        .WithMany("Teaches")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AP_Project.Models.Courses.Section", "Section")
                        .WithMany("Teaches")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("AP_Project.Models.Users.UserRole", b =>
                {
                    b.HasOne("AP_Project.Models.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AP_Project.Models.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AP_Project.Models.Classrooms.Classroom", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("AP_Project.Models.Classrooms.TimeSlot", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("AP_Project.Models.Courses.Course", b =>
                {
                    b.Navigation("Prerequisites");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("AP_Project.Models.Courses.Section", b =>
                {
                    b.Navigation("Takes");

                    b.Navigation("Teaches");
                });

            modelBuilder.Entity("AP_Project.Models.Users.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AP_Project.Models.Users.Instructor", b =>
                {
                    b.Navigation("Teaches");
                });

            modelBuilder.Entity("AP_Project.Models.Users.Student", b =>
                {
                    b.Navigation("Takes");
                });
#pragma warning restore 612, 618
        }
    }
}
