@model AP_Project.Models.Users.Student
@{
  ViewData["ActiveTab"] = "CoursesList";
  ViewData["Title"] = "داشبورد دانشجو";
  Layout = "_LayoutStudent";

  var takes = ViewBag.Takes as List<AP_Project.Models.Courses.Takes>;
  var firstsection = takes?.FirstOrDefault()?.Section;
  int? year = firstsection?.Year;
  int? semester = firstsection?.Semester;
  var pc = new System.Globalization.PersianCalendar();

  string semesterDisplayCode = null;
  if (year.HasValue && semester.HasValue)
  {
    semesterDisplayCode = $"{year.Value % 1000}{semester.Value}";
  }

  var hasFooter = takes != null && takes.Any(t => t.Section?.Course != null);
}

<link rel="stylesheet" href="~/css/StudentDashboard/courses-list.css" asp-append-version="true" />

<form id="antiForgeryForm">
  @Html.AntiForgeryToken()
</form>

<main class="dashboard-main student">
  <div class="titlebar"></div>

  @if (takes != null && takes.Any())
  {
    <div class="action-title-tab">
      دروس نیمسال @semesterDisplayCode
    </div>

    <table class="class-table">
      <thead>
        <tr>
          <th class="col-index">ردیف</th>
          <th class="col-title">عنوان درس</th>
          <th class="col-units">تعداد واحد</th>
          <th class="col-instructor">نام استاد</th>
          <th class="col-location">محل برگزاری</th>
          <th class="col-day">روز</th>
          <th class="col-time">ساعت</th>
          <th class="col-exam">تاریخ امتحان</th>
          <th class="col-action"></th>
        </tr>
      </thead>

      <tbody>
        @for (int i = 0; i < takes.Count; i++)
        {
          var take = takes[i];
          var section = take.Section;
          var course = section?.Course;
          var timeSlot = section?.TimeSlot;
          var classroom = section?.Classroom;

          if (section?.Course != null)
          {
            <tr>
              <td class="col-index">@(i + 1)</td>
              <td class="col-title">@(course?.CourseCode?.Title ?? "-")</td>
              <td class="col-units">@(course?.Unit.ToString() ?? "-")</td>

              <td class="col-instructor">
                @if (section?.Teaches?.Instructor != null)
                {
                  @($"{section.Teaches.Instructor.FirstName} {section.Teaches.Instructor.LastName}")
                }
                else
                {
                  <span class="pending-info">استاد این درس به زودی مشخص می‌شود</span>
                }
              </td>

              <td class="col-location">
                @if (classroom != null)
                {
                  @($"{classroom.Building} - {classroom.RoomNumber}")
                }
                else
                {
                  <span class="pending-info">مکان کلاس به‌زودی مشخص می‌شود</span>
                }
              </td>

              <td class="col-day">@(timeSlot?.Day ?? "-")</td>
              <td class="col-time">
                @if (timeSlot != null)
                {
                  <span>@timeSlot.StartTime.ToString(@"hh\:mm") - @timeSlot.EndTime.ToString(@"hh\:mm")</span>
                }
                else
                {
                  <span>-</span>
                }
              </td>
              <td class="col-exam">
                @if (course?.FinalExamDate != null)
                {
                  var exyear = pc.GetYear(course.FinalExamDate);
                  var exmonth = pc.GetMonth(course.FinalExamDate).ToString("00");
                  var exday = pc.GetDayOfMonth(course.FinalExamDate).ToString("00");
                  @($"{exyear}/{exmonth}/{exday}")
                }
                else
                {
                  @("-")
                }
              </td>
              <td class="col-action">
                <a href="#" class="text-link delete-course-btn" data-sectionid="@take.SectionId">حذف</a>
              </td>
            </tr>
          }
        }
      </tbody>
    </table>
  }
</main>

<div class="empty-popup @(hasFooter ? "" : "will-show")">
  <p>موردی جهت نمایش وجود ندارد</p>
</div>

<div id="course-popup-container"></div>

@section Scripts {
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      document.querySelectorAll('.delete-course-btn').forEach(btn => {
        btn.addEventListener('click', function (e) {
          e.preventDefault();
          const sectionId = this.dataset.sectionid;

          GlobalPopup.show({
            PopupTitle: "تأیید حذف درس",
            SimpleMessage: "آیااز حذف این درس اطمینان دارید؟",
            CanCloseManually: false,
            CloseOnBackdropClick: false,
            BlockScroll: true,
            ShowActionButtons: true,
            GreenButtonText: "انصراف",
            OnGreenClickJs: "GlobalPopup.hide()",
            RedButtonText: "حذف",
            OnRedClickJs: `confirmDropCourse('${sectionId}')`,
            iconType: "warning"
          });
        });
      });
    });

    function confirmDropCourse(sectionId) {
      GlobalPopup.hide();

      fetch(`/StudentCoursesList/DropCourse`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'RequestVerificationToken': getCsrfToken()
        },
        body: JSON.stringify({ sectionId })
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            GlobalPopup.show({
              PopupTitle: "حذف موفق",
              SimpleMessage: "درس مورد نظر با موفقیت حذف شد.",
              CanCloseManually: false,
              CloseOnBackdropClick: false,
              BlockScroll: true,
              iconType: "success",
            });
            setTimeout(() => location.reload(), 1000);
          } else {
            alert(data.message || "خطا در حذف درس، لطفاً دوباره تلاش کنید.");
          }
        })
        .catch(() => {
          alert("خطا در ارتباط با سرور.");
        });
    }

    function getCsrfToken() {
      return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
    }
  </script>
}
