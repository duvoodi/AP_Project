@using AP_Project.FormViewModels
@using AP_Project.Models.Classrooms
@model AP_Project.Models.Users.Admin
@{
  ViewData["ActiveTab"] = "Classroom";
  ViewData["Title"] = "داشبورد ادمین";
  Layout = "_LayoutAdmin";
  var currentHash = ViewContext.HttpContext.Request.Query["h"].ToString();
  var classRooms = ViewData["Classrooms"] as List<Classroom>;
  var addForm = ViewData["AddForm"] as AddClassLocationFormViewModel;
  var editForm = ViewData["EditForm"] as EditClassLocationFormViewModel;
  var deleteSelect = ViewData["DeleteSelect"] as Guid?;
}

<!-- سلکت دو برای دراپ دون -->
<link href="~/lib/select2/css/select2.min.css" rel="stylesheet" />
<!-- استایل مشترک -->
<link rel="stylesheet" href="~/css/AdminDashboard/ClassManagement/class-form-actions.css" asp-append-version="true" />
<!-- استایل اختصاصی -->
<link rel="stylesheet" href="~/css/AdminDashboard/ClassManagement/manage-class-locations.css"
  asp-append-version="true" />

<main class="dashboard-main admin">
  <div class="titlebar">
    <div class="action-title-tab manage">
      مدیریت محل‌های کلاس
    </div>
  </div>

  <!-- ارور گروپ در بالا -->
  <!-- تا در فرم های طولانی ظاهر شدنش معلوم شود -->
  <div class="error-row">
    <div class="error-group">
      <span class="error-message general-error" id="GeneralError">@Html.ValidationMessage("GeneralError")</span>
    </div>
  </div>

  <!-- فرم افزودن کلاس جدید -->
  <div class="form-container">
    <form asp-controller="ClassLocationsManagement" asp-action="AddClassLocation" asp-route-h="@currentHash"
      method="post" class="class-location-form add-form">
      @Html.AntiForgeryToken()
      <div class="form-row">
        <div class="form-group">
          <label>ساختمان</label>
          <input class="form-control valid-name" id="AddBuilding" name="AddBuilding" data-maxlength="64"
            value="@(addForm?.AddBuilding ?? "")" />
          <span class="error-message">@Html.ValidationMessage("AddBuilding")</span>
        </div>
        <div class="form-group">
          <label>شماره کلاس</label>
          <input class="form-control valid-numeric" id="AddRoomNumber" name="AddRoomNumber" data-maxlength="6"
            value="@(addForm?.AddRoomNumber ?? "")" />
          <span class="error-message">@Html.ValidationMessage("AddRoomNumber")</span>
        </div>
        <div class="form-group">
          <label>ظرفیت</label>
          <input class="form-control valid-numeric" id="AddCapacity" name="AddCapacity" data-maxlength="3"
            value="@(addForm?.AddCapacity ?? "")" />
          <span class="error-message">@Html.ValidationMessage("AddCapacity")</span>
        </div>
        <div class="button-group">
          <button type="submit" class="btn-submit add blur-on-leave">افزودن کلاس</button>
        </div>
      </div>
    </form>
  </div>

  <div class="separator"></div>

  <!-- فرم ویرایش کلاس -->
  <div class="form-container">
    <form asp-controller="ClassLocationsManagement" asp-action="EditClassLocation" asp-route-h="@currentHash"
      method="post" class="class-location-form edit-form">
      @Html.AntiForgeryToken()
      <div class="form-row">
        <div class="form-group Edit">
          <label>انتخاب کلاس</label>
          <select class="form-control" name="EditId" id="EditId">
            <option value="">-- انتخاب کنید --</option>
            @foreach (var cr in classRooms)
            {
              <option value="@cr.Id" data-building="@cr.Building" data-room="@cr.RoomNumber" data-capacity="@cr.Capacity">
                @cr.Building - @cr.RoomNumber (ظرفیت @cr.Capacity)
              </option>
            }
          </select>
          <span class="error-message">@Html.ValidationMessage("EditId")</span>
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label>ساختمان</label>
          <input class="form-control valid-name" id="EditBuilding" name="EditBuilding" data-maxlength="64"
            value="@(editForm?.EditBuilding ?? "")" />
          <span class="error-message">@Html.ValidationMessage("EditBuilding")</span>
        </div>
        <div class="form-group">
          <label>شماره کلاس</label>
          <input class="form-control valid-numeric" id="EditRoomNumber" name="EditRoomNumber" data-maxlength="6"
            value="@(editForm?.EditRoomNumber ?? "")" />
          <span class="error-message">@Html.ValidationMessage("EditRoomNumber")</span>
        </div>
        <div class="form-group">
          <label>ظرفیت</label>
          <input class="form-control valid-numeric" id="EditCapacity" name="EditCapacity" data-maxlength="3"
            value="@(editForm?.EditCapacity ?? "")" />
          <span class="error-message">@Html.ValidationMessage("EditCapacity")</span>
        </div>
        <div class="button-group">
          <button type="submit" class="btn-submit edit blur-on-leave">ویرایش کلاس</button>
        </div>
      </div>
    </form>
  </div>

  <div class="separator"></div>

  <!-- فرم حذف کلاس -->
  <div class="form-container">
    <form asp-controller="ClassLocationsManagement" asp-action="DeleteClassLocation" asp-route-h="@currentHash"
      method="post" class="class-location-form" id="delete-class-form">
      @Html.AntiForgeryToken()
      <div class="form-row">
        <div class="form-group">
          <label>انتخاب کلاس</label>
          <select class="form-control" name="DeleteId" id="DeleteId">
            <option value="">-- انتخاب کنید --</option>
            @foreach (var cr in classRooms)
            {
              <option value="@cr.Id">
                @cr.Building - @cr.RoomNumber (ظرفیت @cr.Capacity)
              </option>
            }
          </select>
          <span class="error-message">@Html.ValidationMessage("DeleteId")</span>
        </div>
        <div class="button-group">
          <button type="button" class="btn-submit delete blur-on-leave" id="delete-class-btn">
            حذف کلاس
          </button>
        </div>
      </div>
    </form>
  </div>
</main>

<partial name="_ValidationScriptsPartial" />
@section Scripts {
  <!-- دریافت متغیر های ارسال شده از کنترلر -->
  <script>
    const selectedEditId = '@(editForm?.EditId.ToString() ?? "")';
    const selectedDeleteId = '@(deleteSelect?.ToString() ?? "")';
  </script>
  <script src="~/js/Shared/blur-on-leave.js"></script>
  <script src="~/js/FormUtils/Shared/form-error-utils.js"></script>
  <script src="~/js/FormUtils/Shared/valid-numeric-inputs.js"></script>
  <script src="~/js/FormUtils/Shared/valid-name-inputs.js"></script>
  <!-- سلکت دو برای دراپ دون -->
  <script src="~/lib/select2/js/select2.full.js"></script>
  <script src="~/lib/select2/js/i18n/fa.js"></script>
  <!-- تابع ولیدیت فیلد اختصاصی فیلد های این صفحه -->
  <script src="~/js/FormUtils/ClassLocationForm/validateField.js"></script>
  <script>
    // ولیدیت فیلد ها هنگام خروج از فیلد با نمایش ارور ترو
    document.querySelectorAll('input[id], textarea[id]').forEach(el => {
      el.addEventListener('blur', () => {
        validateField(el.id, true);
      });
    });
    $(document).ready(function () { // سلکت ها با جی کوئری سلکت2
      $('select[id]').each(function () {
        const id = $(this).attr('id');
        $(this).on('select2:close', function () {
          validateField(id, true);
        });
      });
    });

    // راه‌اندازی Select2
    $(document).ready(function () {
      // تنظیم Select2 روی سلکت‌هایی که در Razor رندر شدند
      $('#EditId').select2({
        dropdownAutoWidth: true,
        width: '100%',
        dropdownCssClass: 'custom-select2-dropdown',
        dropdownParent: $('#EditId').closest('.form-group')
      });

      $('#DeleteId').select2({
        dropdownAutoWidth: true,
        width: '100%',
        dropdownCssClass: 'custom-select2-dropdown',
        dropdownParent: $('#DeleteId').closest('.form-group')
      });

      // اگر قبلاً انتخابی داشتیم، ستش می‌کنیم
      if (selectedEditId) {
        $('#EditId').val(selectedEditId).trigger('change');
      }
      if (selectedDeleteId) {
        $('#DeleteId').val(selectedDeleteId).trigger('change');
      }


      function populateEditFields() {
        const opt = $('#EditId').find('option:selected');
        if (!opt.val()) {
          $('#EditBuilding, #EditRoomNumber, #EditCapacity').val('');
          return;
        }
        $('#EditBuilding').val(opt.data('building'));
        $('#EditRoomNumber').val(opt.data('room'));
        $('#EditCapacity').val(opt.data('capacity'));
      }

      // پر کردن اولیه فیلدها با توجه به انتخاب در بارگذاری صفحه
      populateEditFields();

      // هر بار که یک آیتم Select2 انتخاب می‌شود
      $('#EditId').on('select2:select', function (e) {
        populateEditFields();
      });
      // همچنین برای حذف انتخاب (AllowClear)
      $('#EditId').on('select2:unselect', function (e) {
        populateEditFields();
      });
    });

    // انتخاب و مقداردهی فیلدهای فرم ویرایش
    document.getElementById('EditId')?.addEventListener('change', function () {
      const selectedOption = this.options[this.selectedIndex];
      if (selectedOption?.value) {
        document.getElementById('EditBuilding').value = selectedOption.dataset.building;
        document.getElementById('EditRoomNumber').value = selectedOption.dataset.room;
        document.getElementById('EditCapacity').value = selectedOption.dataset.capacity;
      }
    });

    // انتخاب و مقداردهی فیلد حذف
    document.getElementById('DeleteId')?.addEventListener('change', function () {
      document.getElementById('DeleteId').value = this.value;
    });

    // اعتبارسنجی فرم‌ها
    document.querySelectorAll('.class-location-form').forEach(form => {
      form.addEventListener('submit', function (e) {
        e.preventDefault();

        const isAddForm = this.querySelector('#AddBuilding');
        const isEditForm = this.querySelector('#EditBuilding');
        const isDeleteForm = this.querySelector('#DeleteId');

        // حذف ارورهای فقط فرم جاری
        this.querySelectorAll('.error-message').forEach(errorSpan => {
          const parentGroup = errorSpan.closest('.form-group, .error-group');
          if (parentGroup) {
            const firstWithId = parentGroup.querySelector('[id]');
            if (firstWithId) {
              replaceError(firstWithId.id, '');
            }
          }
        });
        setTimeout(() => { // این بخش کد 300 میلی ثانیه باید دیرتر بالا اجرا تا خالی کردن ارور ها رندر گرفته بشه
          let isValid = true;
          if (isAddForm) {
            const v1 = validateField('AddBuilding', true);
            const v2 = validateField('AddRoomNumber', true);
            const v3 = validateField('AddCapacity', true);
            isValid = v1 && v2 && v3; // تک تک ولیدیت با شو ارور ترو بعد اند میگیریم
          } else if (isEditForm) {
            const v1 = validateField('EditId', true);
            const v2 = validateField('EditBuilding', true);
            const v3 = validateField('EditRoomNumber', true);
            const v4 = validateField('EditCapacity', true);
            isValid = v1 && v2 && v3 && v4; // تک تک ولیدیت با شو ارور ترو بعد اند میگیریم
          } else if (isDeleteForm) {
            isValid = validateField('DeleteId', true);
          }

          if (isValid) {
            replaceError("GeneralError", '');
            setTimeout(() => { // این بخش کد 850 میلی ثانیه باید دیرتر اجرا شود تا بسته شدن جنرال ارور رندر گرفته بشه
              this.submit();
            }, 850); // کمی بیشتر از مدت انیمیشن یعنی 800 میلی ثانیه
          }
        }, 300); // کمی بیشتر از مدت انیمیشن یعنی 250 میلی ثانیه
      });
    });
  </script>

  <script>
    const currentHash = '@currentHash';

    document.getElementById('delete-class-btn').addEventListener('click', function () {
      const selected = document.getElementById('DeleteId').value;
      if (!selected) {
        replaceError("DeleteId", "لطفاً یک کلاس را انتخاب کنید");
        return;
      }

      GlobalPopup.show({
        PopupTitle: "تأیید حذف کلاس",
        SimpleMessage: "آیا از حذف این کلاس مطمئن هستید؟",
        CanCloseManually: false,
        CloseOnBackdropClick: false,
        BlockScroll: true,
        ShowActionButtons: true,
        GreenButtonText: "انصراف",
        OnGreenClickJs: "GlobalPopup.hide()",
        RedButtonText: "حذف",
        OnRedClickJs: "submitDeleteClass()",
        iconType: "warning"
      });
    });

    function submitDeleteClass() {
      GlobalPopup.hide();
      const form = document.getElementById('delete-class-form');
      replaceError("GeneralError", "");
      replaceError("DeleteId", "");

      setTimeout(() => {
        const formData = new FormData(form);
        fetch(form.action, {
          method: 'POST',
          body: formData
        }).then(response => {
          return response.text().then(html => ({ ok: response.ok, html }));
        }).then(({ ok, html }) => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');

          const generalError = doc.querySelector('#GeneralError')?.textContent.trim();
          const deleteError = doc.querySelector('[name="DeleteId"] + .error-message')?.textContent.trim();

          if (generalError || deleteError) {
            if (generalError) replaceError("GeneralError", generalError);
            if (deleteError) replaceError("DeleteId", deleteError);
          } else {
            GlobalPopup.show({
              PopupTitle: "حذف موفق",
              SimpleMessage: "کلاس با موفقیت حذف شد.",
              CanCloseManually: false,
              CloseOnBackdropClick: false,
              BlockScroll: true,
              iconType: "success"
            });
            setTimeout(() => {
              window.location.href = '@Url.Action("ManageClassLocationsIndex", "ClassLocationsManagement")' + '?h=' + encodeURIComponent(currentHash);
            }, 2500);
          }
        }).catch(() => {
          replaceError("GeneralError", "خطا در حذف کلاس. لطفاً دوباره تلاش کنید.");
        });
      }, 850);
    }
  </script>

}
